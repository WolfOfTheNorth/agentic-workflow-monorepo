name: Deploy Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deploy all packages'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'
  PNPM_VERSION: '9.15.0'

jobs:
  detect-deployment-changes:
    name: Detect Packages to Deploy
    runs-on: ubuntu-latest
    outputs:
      frontend_changed: ${{ steps.changes.outputs.frontend_changed }}
      backend_changed: ${{ steps.changes.outputs.backend_changed }}
      should_deploy_frontend: ${{ steps.changes.outputs.should_deploy_frontend }}
      should_deploy_backend: ${{ steps.changes.outputs.should_deploy_backend }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        id: changes
        run: |
          FORCE_DEPLOY="${{ github.event.inputs.force_deploy }}"

          if [ "$FORCE_DEPLOY" = "true" ]; then
            echo "Force deploy enabled - deploying all packages"
            echo "frontend_changed=true" >> $GITHUB_OUTPUT
            echo "backend_changed=true" >> $GITHUB_OUTPUT
            echo "should_deploy_frontend=true" >> $GITHUB_OUTPUT
            echo "should_deploy_backend=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Get changed files since last deployment tag or previous commit
          if git describe --tags --match "deploy-*" >/dev/null 2>&1; then
            LAST_DEPLOY=$(git describe --tags --match "deploy-*" --abbrev=0)
            CHANGED_FILES=$(git diff --name-only $LAST_DEPLOY HEAD)
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          fi

          echo "Changed files since last deployment:"
          echo "$CHANGED_FILES"

          # Check if frontend should be deployed
          FRONTEND_CHANGED="false"
          BACKEND_CHANGED="false"

          if echo "$CHANGED_FILES" | grep -q -E "^(apps/frontend/|packages/(shared|ui|api)/)"; then
            FRONTEND_CHANGED="true"
          fi

          if echo "$CHANGED_FILES" | grep -q -E "^(apps/backend/|packages/shared/)"; then
            BACKEND_CHANGED="true"
          fi

          # Check if root configs changed (affects both)
          if echo "$CHANGED_FILES" | grep -q -E "^(package.json|pnpm-workspace.yaml|configs/)"; then
            FRONTEND_CHANGED="true"
            BACKEND_CHANGED="true"
          fi

          echo "frontend_changed=$FRONTEND_CHANGED" >> $GITHUB_OUTPUT
          echo "backend_changed=$BACKEND_CHANGED" >> $GITHUB_OUTPUT
          echo "should_deploy_frontend=$FRONTEND_CHANGED" >> $GITHUB_OUTPUT
          echo "should_deploy_backend=$BACKEND_CHANGED" >> $GITHUB_OUTPUT

  build-and-test:
    name: Build and Test for Deployment
    runs-on: ubuntu-latest
    needs: detect-deployment-changes
    if: needs.detect-deployment-changes.outputs.should_deploy_frontend == 'true' || needs.detect-deployment-changes.outputs.should_deploy_backend == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Python
        if: needs.detect-deployment-changes.outputs.should_deploy_backend == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Python dependencies
        if: needs.detect-deployment-changes.outputs.should_deploy_backend == 'true'
        run: |
          cd apps/backend
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint and type check
        run: |
          if [ "${{ needs.detect-deployment-changes.outputs.should_deploy_frontend }}" = "true" ]; then
            pnpm lint || echo "Linting completed with warnings"
            pnpm type-check || echo "Type checking completed with warnings"
          fi

      - name: Run tests
        run: |
          if [ "${{ needs.detect-deployment-changes.outputs.should_deploy_frontend }}" = "true" ]; then
            pnpm test
          fi
          if [ "${{ needs.detect-deployment-changes.outputs.should_deploy_backend }}" = "true" ]; then
            cd apps/backend
            python manage.py test
          fi

      - name: Build packages
        run: |
          if [ "${{ needs.detect-deployment-changes.outputs.should_deploy_frontend }}" = "true" ]; then
            pnpm build
          fi
          if [ "${{ needs.detect-deployment-changes.outputs.should_deploy_backend }}" = "true" ]; then
            cd apps/backend
            python manage.py collectstatic --noinput
          fi

      - name: Upload frontend build
        if: needs.detect-deployment-changes.outputs.should_deploy_frontend == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: apps/frontend/dist
          retention-days: 7

      - name: Upload backend build
        if: needs.detect-deployment-changes.outputs.should_deploy_backend == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: |
            apps/backend
            !apps/backend/node_modules
            !apps/backend/.venv
          retention-days: 7

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [detect-deployment-changes, build-and-test]
    if: needs.detect-deployment-changes.outputs.should_deploy_frontend == 'true'
    environment:
      name: ${{ github.event.inputs.environment || 'staging' }}
      url: ${{ steps.deploy.outputs.preview_url }}
    steps:
      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ./dist

      - name: Deploy to Vercel (Staging)
        if: ${{ github.event.inputs.environment == 'staging' || github.event.inputs.environment == '' }}
        id: deploy-staging
        run: |
          # Example Vercel deployment
          echo "Deploying to Vercel staging..."
          # npx vercel --token=${{ secrets.VERCEL_TOKEN }} --yes
          # echo "preview_url=https://staging.example.com" >> $GITHUB_OUTPUT
          echo "preview_url=https://staging-preview.vercel.app" >> $GITHUB_OUTPUT

      - name: Deploy to Vercel (Production)
        if: ${{ github.event.inputs.environment == 'production' }}
        id: deploy-production
        run: |
          # Example Vercel production deployment
          echo "Deploying to Vercel production..."
          # npx vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --yes
          # echo "preview_url=https://production.example.com" >> $GITHUB_OUTPUT
          echo "preview_url=https://production.vercel.app" >> $GITHUB_OUTPUT

      - name: Set deployment URL
        id: deploy
        run: |
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            echo "preview_url=${{ steps.deploy-production.outputs.preview_url }}" >> $GITHUB_OUTPUT
          else
            echo "preview_url=${{ steps.deploy-staging.outputs.preview_url }}" >> $GITHUB_OUTPUT
          fi

  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: [detect-deployment-changes, build-and-test]
    if: needs.detect-deployment-changes.outputs.should_deploy_backend == 'true'
    environment:
      name: ${{ github.event.inputs.environment || 'staging' }}-backend
      url: ${{ steps.deploy.outputs.api_url }}
    steps:
      - name: Download backend build
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: ./backend

      - name: Deploy to Railway (Staging)
        if: ${{ github.event.inputs.environment == 'staging' || github.event.inputs.environment == '' }}
        id: deploy-staging
        run: |
          # Example Railway deployment
          echo "Deploying to Railway staging..."
          # railway deploy --service backend-staging
          # echo "api_url=https://api-staging.railway.app" >> $GITHUB_OUTPUT
          echo "api_url=https://api-staging.railway.app" >> $GITHUB_OUTPUT

      - name: Deploy to Railway (Production)
        if: ${{ github.event.inputs.environment == 'production' }}
        id: deploy-production
        run: |
          # Example Railway production deployment
          echo "Deploying to Railway production..."
          # railway deploy --service backend-production
          # echo "api_url=https://api.railway.app" >> $GITHUB_OUTPUT
          echo "api_url=https://api.railway.app" >> $GITHUB_OUTPUT

      - name: Set deployment URL
        id: deploy
        run: |
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            echo "api_url=${{ steps.deploy-production.outputs.api_url }}" >> $GITHUB_OUTPUT
          else
            echo "api_url=${{ steps.deploy-staging.outputs.api_url }}" >> $GITHUB_OUTPUT
          fi

  post-deployment:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    if: always() && (needs.deploy-frontend.result == 'success' || needs.deploy-backend.result == 'success')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create deployment tag
        run: |
          TIMESTAMP=$(date -u +"%Y%m%d-%H%M%S")
          TAG="deploy-${TIMESTAMP}"
          git tag $TAG
          git push origin $TAG
          echo "Created deployment tag: $TAG"

      - name: Run health checks
        run: |
          if [ "${{ needs.deploy-frontend.result }}" = "success" ]; then
            echo "Running frontend health checks..."
            # curl -f ${{ needs.deploy-frontend.outputs.preview_url }}/health || exit 1
          fi
          if [ "${{ needs.deploy-backend.result }}" = "success" ]; then
            echo "Running backend health checks..."
            # curl -f ${{ needs.deploy-backend.outputs.api_url }}/health || exit 1
          fi

      - name: Notify deployment status
        run: |
          echo "Deployment completed successfully!"
          if [ "${{ needs.deploy-frontend.result }}" = "success" ]; then
            echo "Frontend URL: ${{ needs.deploy-frontend.outputs.preview_url }}"
          fi
          if [ "${{ needs.deploy-backend.result }}" = "success" ]; then
            echo "Backend URL: ${{ needs.deploy-backend.outputs.api_url }}"
          fi

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'workflow_dispatch'
    steps:
      - name: Rollback to previous version
        run: |
          echo "Deployment failed. Rolling back..."
          # Add rollback logic here
          # This could involve reverting to previous Vercel/Railway deployments
          echo "Rollback completed"
