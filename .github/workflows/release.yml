name: Release Pipeline

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'
  PNPM_VERSION: '9.15.0'

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Check if this is a prerelease (contains alpha, beta, rc)
          if echo "$VERSION" | grep -E "(alpha|beta|rc)"; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

          echo "Release version: $VERSION"
          echo "Is prerelease: $(echo $VERSION | grep -E "(alpha|beta|rc)" && echo true || echo false)"

  build-release:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: validate-release
    strategy:
      matrix:
        package: [frontend, backend, shared, ui, api]
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Python
        if: matrix.package == 'backend'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            ~/.cache/pip
            **/node_modules
          key: ${{ runner.os }}-deps-${{ matrix.package }}-${{ hashFiles('**/pnpm-lock.yaml', '**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-deps-${{ matrix.package }}-
            ${{ runner.os }}-deps-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Python dependencies
        if: matrix.package == 'backend'
        run: |
          cd apps/backend
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Update version
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          if [ "${{ matrix.package }}" != "backend" ]; then
            # Update package.json version for Node.js packages
            if [ "${{ matrix.package }}" = "frontend" ]; then
              cd apps/frontend
            else
              cd packages/${{ matrix.package }}
            fi
            npm version $VERSION --no-git-tag-version
          fi

      - name: Build package
        run: |
          if [ "${{ matrix.package }}" = "backend" ]; then
            cd apps/backend
            python manage.py collectstatic --noinput
          else
            if [ "${{ matrix.package }}" = "frontend" ]; then
              pnpm --filter frontend build
            else
              pnpm --filter ${{ matrix.package }} build
            fi
          fi

      - name: Run tests
        run: |
          if [ "${{ matrix.package }}" = "backend" ]; then
            cd apps/backend
            python manage.py test
          else
            pnpm --filter ${{ matrix.package }} test
          fi

      - name: Create release package
        run: |
          mkdir -p release-artifacts

          if [ "${{ matrix.package }}" = "frontend" ]; then
            cd apps/frontend
            tar -czf ../../release-artifacts/frontend-${{ needs.validate-release.outputs.version }}.tar.gz dist
          elif [ "${{ matrix.package }}" = "backend" ]; then
            cd apps/backend
            tar -czf ../../release-artifacts/backend-${{ needs.validate-release.outputs.version }}.tar.gz . \
              --exclude='.venv' --exclude='node_modules' --exclude='__pycache__'
          else
            cd packages/${{ matrix.package }}
            tar -czf ../../release-artifacts/${{ matrix.package }}-${{ needs.validate-release.outputs.version }}.tar.gz dist lib
          fi

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-${{ matrix.package }}
          path: release-artifacts/${{ matrix.package }}-${{ needs.validate-release.outputs.version }}.tar.gz
          retention-days: 30

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release]
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -n "$LAST_TAG" ]; then
            echo "## Changes since $LAST_TAG" > CHANGELOG.md
            git log --oneline --pretty=format:"- %s" $LAST_TAG..HEAD >> CHANGELOG.md
          else
            echo "## Initial Release" > CHANGELOG.md
            echo "First release of the monorepo structure." >> CHANGELOG.md
          fi

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.validate-release.outputs.version }}
          name: Release v${{ needs.validate-release.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          prerelease: ${{ needs.validate-release.outputs.is_prerelease }}
          files: |
            artifacts/release-*/frontend-*.tar.gz
            artifacts/release-*/backend-*.tar.gz
            artifacts/release-*/shared-*.tar.gz
            artifacts/release-*/ui-*.tar.gz
            artifacts/release-*/api-*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate-release, build-release]
    if: needs.validate-release.outputs.is_prerelease == 'false'
    environment:
      name: production
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Deploy frontend to production
        run: |
          echo "Deploying frontend v${{ needs.validate-release.outputs.version }} to production..."
          # Extract and deploy frontend
          cd artifacts/release-frontend
          tar -xzf frontend-${{ needs.validate-release.outputs.version }}.tar.gz
          # Deploy to Vercel production
          # npx vercel --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy backend to production
        run: |
          echo "Deploying backend v${{ needs.validate-release.outputs.version }} to production..."
          # Extract and deploy backend
          cd artifacts/release-backend
          tar -xzf backend-${{ needs.validate-release.outputs.version }}.tar.gz
          # Deploy to Railway production
          # railway deploy --service backend-production

      - name: Run post-deployment checks
        run: |
          echo "Running production health checks..."
          # Add health check URLs
          # curl -f https://app.example.com/health
          # curl -f https://api.example.com/health

  publish-packages:
    name: Publish Packages
    runs-on: ubuntu-latest
    needs: [validate-release, build-release]
    if: needs.validate-release.outputs.is_prerelease == 'false'
    strategy:
      matrix:
        package: [shared, ui, api]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build package
        run: pnpm --filter ${{ matrix.package }} build

      - name: Publish to npm
        run: |
          cd packages/${{ matrix.package }}
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  notify-release:
    name: Notify Release Completion
    runs-on: ubuntu-latest
    needs: [validate-release, create-github-release, deploy-production, publish-packages]
    if: always()
    steps:
      - name: Notify success
        if: needs.create-github-release.result == 'success'
        run: |
          echo "🎉 Release v${{ needs.validate-release.outputs.version }} completed successfully!"
          echo "📦 GitHub Release: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate-release.outputs.version }}"

          if [ "${{ needs.deploy-production.result }}" = "success" ]; then
            echo "🚀 Production deployment: Complete"
          fi

          if [ "${{ needs.publish-packages.result }}" = "success" ]; then
            echo "📚 NPM packages: Published"
          fi

      - name: Notify failure
        if: failure()
        run: |
          echo "❌ Release v${{ needs.validate-release.outputs.version }} failed!"
          echo "Please check the workflow logs for details."
