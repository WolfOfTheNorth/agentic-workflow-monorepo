name: Security Audit

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security audit daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      severity:
        description: 'Minimum severity level'
        required: false
        default: 'moderate'
        type: choice
        options:
          - low
          - moderate
          - high
          - critical

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run pnpm audit
        run: |
          echo "## pnpm audit results" >> $GITHUB_STEP_SUMMARY
          pnpm audit --audit-level moderate || true

      - name: Run custom security audit
        run: |
          SEVERITY=${{ github.event.inputs.severity || 'moderate' }}
          echo "Running security audit with severity: $SEVERITY"
          node tools/dev/security-audit.js --ci --severity "$SEVERITY" --json --output security-report.json

      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report-${{ github.run_number }}
          path: security-report.json
          retention-days: 30

      - name: Check for high severity vulnerabilities
        run: |
          if [ -f security-report.json ]; then
            HIGH_VULNS=$(jq '.summary.severityBreakdown.high // 0' security-report.json)
            CRITICAL_VULNS=$(jq '.summary.severityBreakdown.critical // 0' security-report.json)
            
            echo "High severity vulnerabilities: $HIGH_VULNS"
            echo "Critical severity vulnerabilities: $CRITICAL_VULNS"
            
            if [ "$HIGH_VULNS" -gt 0 ] || [ "$CRITICAL_VULNS" -gt 0 ]; then
              echo "::error::High or critical severity vulnerabilities found!"
              echo "HIGH_SEVERITY_FOUND=true" >> $GITHUB_ENV
            fi
          fi

      - name: Comment PR with security results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            try {
              const reportData = fs.readFileSync('security-report.json', 'utf8');
              const report = JSON.parse(reportData);
              
              const { summary } = report;
              const hasVulns = summary.totalVulnerabilities > 0;
              const hasHighSeverity = summary.severityBreakdown.high > 0 || summary.severityBreakdown.critical > 0;
              
              let emoji = hasHighSeverity ? '🚨' : hasVulns ? '⚠️' : '✅';
              let title = hasHighSeverity ? 'Critical Security Issues Found' : 
                         hasVulns ? 'Security Vulnerabilities Detected' : 
                         'Security Audit Passed';
              
              let body = `## ${emoji} Security Audit Results\n\n`;
              body += `**Summary:**\n`;
              body += `- Total vulnerabilities: ${summary.totalVulnerabilities}\n`;
              body += `- Critical: ${summary.severityBreakdown.critical || 0}\n`;
              body += `- High: ${summary.severityBreakdown.high || 0}\n`;
              body += `- Moderate: ${summary.severityBreakdown.moderate || 0}\n`;
              body += `- Low: ${summary.severityBreakdown.low || 0}\n\n`;
              
              if (hasHighSeverity) {
                body += `⚠️ **Action Required**: This PR introduces or contains high/critical severity vulnerabilities that must be addressed before merging.\n\n`;
              }
              
              if (summary.outdatedPackages > 0) {
                body += `📦 **Outdated packages**: ${summary.outdatedPackages} packages could be updated.\n\n`;
              }
              
              body += `View the full security report in the workflow artifacts.`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } catch (error) {
              console.log('Could not read security report:', error.message);
            }

  dependency-validation:
    name: Dependency Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Validate dependencies
        run: |
          npm run deps:validate -- --output dependency-report.json

      - name: Upload dependency report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-report-${{ github.run_number }}
          path: dependency-report.json
          retention-days: 30

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [security-audit, dependency-validation]
    if: always()

    steps:
      - name: Download security report
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: security-report-${{ github.run_number }}

      - name: Download dependency report
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: dependency-report-${{ github.run_number }}

      - name: Generate security summary
        run: |
          echo "# Security Audit Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f security-report.json ]; then
            echo "## 🛡️ Security Vulnerabilities" >> $GITHUB_STEP_SUMMARY
            
            TOTAL_VULNS=$(jq '.summary.totalVulnerabilities // 0' security-report.json)
            CRITICAL=$(jq '.summary.severityBreakdown.critical // 0' security-report.json)
            HIGH=$(jq '.summary.severityBreakdown.high // 0' security-report.json)
            MODERATE=$(jq '.summary.severityBreakdown.moderate // 0' security-report.json)
            LOW=$(jq '.summary.severityBreakdown.low // 0' security-report.json)
            
            echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Critical | $CRITICAL |" >> $GITHUB_STEP_SUMMARY
            echo "| High     | $HIGH |" >> $GITHUB_STEP_SUMMARY
            echo "| Moderate | $MODERATE |" >> $GITHUB_STEP_SUMMARY
            echo "| Low      | $LOW |" >> $GITHUB_STEP_SUMMARY
            echo "| **Total** | **$TOTAL_VULNS** |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ "$TOTAL_VULNS" -eq 0 ]; then
              echo "✅ No security vulnerabilities found!" >> $GITHUB_STEP_SUMMARY
            elif [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
              echo "🚨 **Critical or high severity vulnerabilities found! Immediate attention required.**" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ Security vulnerabilities detected. Review and address when possible." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ Security report not found" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f dependency-report.json ]; then
            echo "## 📦 Dependency Validation" >> $GITHUB_STEP_SUMMARY
            
            VERSION_CONFLICTS=$(jq '.summary.versionConflicts // 0' dependency-report.json)
            PEER_ISSUES=$(jq '.summary.peerDependencyIssues // 0' dependency-report.json)
            
            echo "- Version conflicts: $VERSION_CONFLICTS" >> $GITHUB_STEP_SUMMARY
            echo "- Peer dependency issues: $PEER_ISSUES" >> $GITHUB_STEP_SUMMARY
            
            if [ "$VERSION_CONFLICTS" -eq 0 ] && [ "$PEER_ISSUES" -eq 0 ]; then
              echo "✅ No dependency issues found!" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ Dependency issues detected. Run \`npm run deps:validate\` for details." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ Dependency report not found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Fail on high severity vulnerabilities
        if: env.HIGH_SEVERITY_FOUND == 'true'
        run: |
          echo "::error::High or critical severity vulnerabilities found!"
          exit 1
