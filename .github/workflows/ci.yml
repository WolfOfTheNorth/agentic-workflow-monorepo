name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'
  PNPM_VERSION: '9.15.0'

jobs:
  detect-changes:
    name: Detect Changed Packages
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.changes.outputs.packages }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # For PR, compare against target branch
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
          else
            # For push, compare against previous commit
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          fi

          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Detect which packages have changes
          PACKAGES="[]"

          # Check if frontend changed
          if echo "$CHANGED_FILES" | grep -q "^apps/frontend/"; then
            PACKAGES=$(echo $PACKAGES | jq '. + ["frontend"]')
          fi

          # Check if backend changed
          if echo "$CHANGED_FILES" | grep -q "^apps/backend/"; then
            PACKAGES=$(echo $PACKAGES | jq '. + ["backend"]')
          fi

          # Check if shared packages changed
          if echo "$CHANGED_FILES" | grep -q "^packages/shared/"; then
            PACKAGES=$(echo $PACKAGES | jq '. + ["shared"]')
          fi

          if echo "$CHANGED_FILES" | grep -q "^packages/ui/"; then
            PACKAGES=$(echo $PACKAGES | jq '. + ["ui"]')
          fi

          if echo "$CHANGED_FILES" | grep -q "^packages/api/"; then
            PACKAGES=$(echo $PACKAGES | jq '. + ["api"]')
          fi

          # Check if root configs changed (affects all packages)
          if echo "$CHANGED_FILES" | grep -q -E "^(package.json|pnpm-workspace.yaml|tsconfig.json|configs/|eslint.config.js)"; then
            PACKAGES='["frontend", "backend", "shared", "ui", "api"]'
          fi

          echo "packages=$PACKAGES" >> $GITHUB_OUTPUT

      - name: Set matrix
        id: set-matrix
        run: |
          PACKAGES='${{ steps.changes.outputs.packages }}'
          MATRIX=$(echo $PACKAGES | jq -c 'map({"package": .})')
          echo "matrix={\"include\":$MATRIX}" >> $GITHUB_OUTPUT

  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.packages != '[]'
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint package
        run: |
          if [ "${{ matrix.package }}" = "frontend" ] || [ "${{ matrix.package }}" = "shared" ] || [ "${{ matrix.package }}" = "ui" ] || [ "${{ matrix.package }}" = "api" ]; then
            pnpm --filter ${{ matrix.package }} lint
          fi

      - name: Type check package
        run: |
          if [ "${{ matrix.package }}" = "frontend" ] || [ "${{ matrix.package }}" = "shared" ] || [ "${{ matrix.package }}" = "ui" ] || [ "${{ matrix.package }}" = "api" ]; then
            pnpm --filter ${{ matrix.package }} type-check
          fi

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.packages != '[]'
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Python
        if: matrix.package == 'backend'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Python dependencies
        if: matrix.package == 'backend'
        run: |
          cd apps/backend
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Run tests
        run: |
          if [ "${{ matrix.package }}" = "backend" ]; then
            cd apps/backend
            python manage.py test
          else
            pnpm --filter ${{ matrix.package }} test
          fi

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [detect-changes, lint-and-typecheck, test]
    if: needs.detect-changes.outputs.packages != '[]'
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Python
        if: matrix.package == 'backend'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build package
        run: |
          if [ "${{ matrix.package }}" = "backend" ]; then
            cd apps/backend
            python manage.py collectstatic --noinput
          else
            pnpm --filter ${{ matrix.package }} build
          fi

      - name: Upload build artifacts
        if: matrix.package == 'frontend'
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: apps/frontend/dist
          retention-days: 1

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Run dependency vulnerability check
        run: |
          # Install npm-audit-ci for better CI integration
          pnpm add -g npm-audit-ci
          npm-audit-ci --moderate

  all-checks-pass:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test, build, security-audit]
    if: always()
    steps:
      - name: Check if all jobs succeeded
        run: |
          if [ "${{ needs.lint-and-typecheck.result }}" != "success" ] || 
             [ "${{ needs.test.result }}" != "success" ] || 
             [ "${{ needs.build.result }}" != "success" ] || 
             [ "${{ needs.security-audit.result }}" != "success" ]; then
            echo "One or more jobs failed"
            exit 1
          fi
          echo "All checks passed successfully!"
